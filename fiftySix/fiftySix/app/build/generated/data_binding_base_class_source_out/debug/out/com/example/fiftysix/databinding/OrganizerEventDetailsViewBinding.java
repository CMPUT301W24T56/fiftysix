// Generated by view binder compiler. Do not edit!
package com.example.fiftysix.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.Switch;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.fiftysix.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class OrganizerEventDetailsViewBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageButton buttonBackCreateEvent;

  @NonNull
  public final AppCompatButton buttonCreateEvent;

  @NonNull
  public final AppCompatButton buttonUploadPoster;

  @NonNull
  public final LinearLayout createEventDetails;

  @NonNull
  public final EditText editTextNumberAttendeeLimit;

  @NonNull
  public final EditText eventAddressEditText;

  @NonNull
  public final EditText eventDateEditText;

  @NonNull
  public final EditText eventDetailsEditText;

  @NonNull
  public final EditText eventNameEditText;

  @NonNull
  public final AppCompatButton generatePromoQR;

  @NonNull
  public final LinearLayout linearLayout2;

  @NonNull
  public final AppCompatButton reuseCheckinQR;

  @NonNull
  public final Switch switchAttendeeLimit;

  @NonNull
  public final TextView textViewTitle;

  private OrganizerEventDetailsViewBinding(@NonNull LinearLayout rootView,
      @NonNull ImageButton buttonBackCreateEvent, @NonNull AppCompatButton buttonCreateEvent,
      @NonNull AppCompatButton buttonUploadPoster, @NonNull LinearLayout createEventDetails,
      @NonNull EditText editTextNumberAttendeeLimit, @NonNull EditText eventAddressEditText,
      @NonNull EditText eventDateEditText, @NonNull EditText eventDetailsEditText,
      @NonNull EditText eventNameEditText, @NonNull AppCompatButton generatePromoQR,
      @NonNull LinearLayout linearLayout2, @NonNull AppCompatButton reuseCheckinQR,
      @NonNull Switch switchAttendeeLimit, @NonNull TextView textViewTitle) {
    this.rootView = rootView;
    this.buttonBackCreateEvent = buttonBackCreateEvent;
    this.buttonCreateEvent = buttonCreateEvent;
    this.buttonUploadPoster = buttonUploadPoster;
    this.createEventDetails = createEventDetails;
    this.editTextNumberAttendeeLimit = editTextNumberAttendeeLimit;
    this.eventAddressEditText = eventAddressEditText;
    this.eventDateEditText = eventDateEditText;
    this.eventDetailsEditText = eventDetailsEditText;
    this.eventNameEditText = eventNameEditText;
    this.generatePromoQR = generatePromoQR;
    this.linearLayout2 = linearLayout2;
    this.reuseCheckinQR = reuseCheckinQR;
    this.switchAttendeeLimit = switchAttendeeLimit;
    this.textViewTitle = textViewTitle;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static OrganizerEventDetailsViewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static OrganizerEventDetailsViewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.organizer_event_details_view, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static OrganizerEventDetailsViewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonBackCreateEvent;
      ImageButton buttonBackCreateEvent = ViewBindings.findChildViewById(rootView, id);
      if (buttonBackCreateEvent == null) {
        break missingId;
      }

      id = R.id.buttonCreateEvent;
      AppCompatButton buttonCreateEvent = ViewBindings.findChildViewById(rootView, id);
      if (buttonCreateEvent == null) {
        break missingId;
      }

      id = R.id.buttonUploadPoster;
      AppCompatButton buttonUploadPoster = ViewBindings.findChildViewById(rootView, id);
      if (buttonUploadPoster == null) {
        break missingId;
      }

      LinearLayout createEventDetails = (LinearLayout) rootView;

      id = R.id.editTextNumberAttendeeLimit;
      EditText editTextNumberAttendeeLimit = ViewBindings.findChildViewById(rootView, id);
      if (editTextNumberAttendeeLimit == null) {
        break missingId;
      }

      id = R.id.eventAddressEditText;
      EditText eventAddressEditText = ViewBindings.findChildViewById(rootView, id);
      if (eventAddressEditText == null) {
        break missingId;
      }

      id = R.id.eventDateEditText;
      EditText eventDateEditText = ViewBindings.findChildViewById(rootView, id);
      if (eventDateEditText == null) {
        break missingId;
      }

      id = R.id.eventDetailsEditText;
      EditText eventDetailsEditText = ViewBindings.findChildViewById(rootView, id);
      if (eventDetailsEditText == null) {
        break missingId;
      }

      id = R.id.eventNameEditText;
      EditText eventNameEditText = ViewBindings.findChildViewById(rootView, id);
      if (eventNameEditText == null) {
        break missingId;
      }

      id = R.id.generatePromoQR;
      AppCompatButton generatePromoQR = ViewBindings.findChildViewById(rootView, id);
      if (generatePromoQR == null) {
        break missingId;
      }

      id = R.id.linearLayout2;
      LinearLayout linearLayout2 = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout2 == null) {
        break missingId;
      }

      id = R.id.reuseCheckinQR;
      AppCompatButton reuseCheckinQR = ViewBindings.findChildViewById(rootView, id);
      if (reuseCheckinQR == null) {
        break missingId;
      }

      id = R.id.switchAttendeeLimit;
      Switch switchAttendeeLimit = ViewBindings.findChildViewById(rootView, id);
      if (switchAttendeeLimit == null) {
        break missingId;
      }

      id = R.id.textViewTitle;
      TextView textViewTitle = ViewBindings.findChildViewById(rootView, id);
      if (textViewTitle == null) {
        break missingId;
      }

      return new OrganizerEventDetailsViewBinding((LinearLayout) rootView, buttonBackCreateEvent,
          buttonCreateEvent, buttonUploadPoster, createEventDetails, editTextNumberAttendeeLimit,
          eventAddressEditText, eventDateEditText, eventDetailsEditText, eventNameEditText,
          generatePromoQR, linearLayout2, reuseCheckinQR, switchAttendeeLimit, textViewTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
